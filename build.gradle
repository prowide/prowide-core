apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'idea'
apply plugin: 'eclipse'

archivesBaseName = 'pw-swift-core'

def SRU = "2021"

version "SRU${SRU}-9.2.8-SNAPSHOT"
group 'com.prowidesoftware'
	
sourceCompatibility = '1.8'
targetCompatibility = '1.8'
	
tasks.withType(JavaCompile) {
	options.fork = true
	if (project.hasProperty('JDK8_HOME')) {
		options.forkOptions.executable = "$JDK8_HOME/bin/javac"
	}
	options.encoding = 'UTF-8'
}
	
repositories {
    mavenCentral()
}
	
dependencies {
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'org.apache.commons:commons-text:1.9'
	implementation 'com.google.code.gson:gson:2.8.8'

	compileOnly 'javax.persistence:javax.persistence-api:2.2'
	compileOnly group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
	testImplementation('org.junit.jupiter:junit-jupiter:5.8.1')
	testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
	testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.8.3'
	testImplementation group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.8.3'
	testImplementation group: 'org.xmlunit', name: 'xmlunit-assertj', version: '2.8.3'
}

sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']

test {
	useJUnitPlatform()
}

tasks.withType(Jar) {
	manifest.attributes(
			'Specification-Title': 'Prowide Core',
			'Specification-Version': project.version,
			'Specification-Vendor': "SRU${SRU}",
			'Implementation-Title': 'Prowide Core',
			'Implementation-Version': project.version,
			'Implementation-Vendor': 'www.prowidesoftware.com',
			'Built-OS': System.getProperty('os.name'),
			'Source-Compatibility': project.sourceCompatibility,
			'Target-Compatibility': project.targetCompatibility,
			'Built-Date': new Date().format("yyyy-MM-dd")
	)
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}

def formattedDate() { 
	new Date().format('dd MMM yyyy') 
}

javadoc {
	failOnError true
	options.overview = "overview.html"
	options.header = "${version}"
	options.windowTitle = "Prowide Core API Reference"
	options.footer="SRU${SRU}, generated ${formattedDate()}"
	
	// this will fail when the option is not available (older JDK)
	options.addBooleanOption("-allow-script-in-comments", true)
    
	options.bottom = '<script src="//static.getclicky.com/js"></script><script>try{ clicky.init(101039278); }catch(e){}</script>'
	exclude "**/internal/**"

	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			afterEvaluate {
				from components.java
				artifactId = 'pw-swift-core'
				groupId = 'com.prowidesoftware'
				version = "${version}"
				pom {
					name = 'Prowide Core'
					description = 'Prowide Library for SWIFT messages'
					url = 'http://www.prowidesoftware.com'
					scm {
						url = 'https://github.com/prowide/prowide-core.git'
						connection = 'git@github.com:prowide/prowide-core.git'
					}
					inceptionYear = '2006'
					licenses {
						license {
							name = 'Apache License Version 2.0'
							url = 'https://www.apache.org/licenses/LICENSE-2.0'
							distribution = 'repo'
						}
					}
					developers {
						developer {
							id = 'zubri'
							name = 'Sebastian Zubrinic'
							email = 'sebastian@prowidesoftware.com'
						}
					}
					organization {
						name = 'Prowide'
						url = 'http://www.prowidesoftware.com'
					}
				}
			}
			//pom.withXml {
			//	replaceDependencyVersion(asNode(), 'pw-swift-integrator-sdk', rootProject.version)
			//}
		}
	}
}
jar.finalizedBy generatePomFileForMavenJavaPublication

// to avoid metadata in the generated pom.xml files
tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

distributions {
	main {
		contents {
			from javadocJar
			from sourcesJar
			into ('lib') {
				from (project.configurations.runtimeClasspath)
			}
			from files('LICENSE.txt')
			from files('CHANGELOG.txt')
			from ("$buildDir/publications/mavenJava/pom-default.xml") {
				rename ".*", "pom.xml"
			}
		}
	}
}

distTar.enabled = false

distZip {
    dependsOn generatePomFileForMavenJavaPublication
	doLast {
		if (!project.hasProperty('JDK8_HOME')) {
			println "*** WARNING: For releases an explicit JDK8_HOME variable must be set in gradle.properties ***"
		}
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
    
	// exclude generated code
	afterEvaluate {
		getClassDirectories().setFrom(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				'**/SchemeConstants**',
				'**/mt0xx/**',
				'**/mt1xx/**',
				'**/mt2xx/**',
				'**/mt3xx/**',
				'**/mt4xx/**',
				'**/mt5xx/**',
				'**/mt6xx/**',
				'**/mt7xx/**',
				'**/mt8xx/**',
				'**/mt9xx/**'
			])
		})
	}
}

test.finalizedBy jacocoTestReport

task bundle(type: Zip, dependsOn: build) {
	description 'Creates the bundle.jar for Maven Central distribution'
	from jar
	from sourcesJar
	from javadocJar
	from ("$buildDir/publications/mavenJava/pom-default.xml") {
		rename ".*", "pom.xml"
	}
	archiveName 'bundle.zip'
}